# DeepColorizer

This project is to use the deep neural network (DNN) to colorize grey scale image. The model used in this project is built with Keras on TensorFlow, a simple GUI that can be run on Linux is provided to demonstrate the DNN. User will open a grey scale image (any size and even a colored image to simply test the colorizing performance), by clicking the button “Colorize”, the GUI will use the trained model to colorize the input image.

## Dataset

There were multiple trials to decide what will be the best dataset, to be able to train the model correctly, but also be time-efficient since this is a class project that has certain deadlines. The original dataset contains 9,294 images, obtained from “unsplash.com”, cropped and converted into resolution of 256x256. However, it is realized that by using a dataset with such size, each epoch consumes unacceptably long time, and if the total epoch amount is small, the model does not perform well as expected. Furthermore, the original dataset contains images with multiple types of objects, therefore the model appears to be underfit, even when total epoch amount is very large. As a result, it was decided that, two categories of images (portraits and landscape) were extracted from the original dataset, and the total number of images are limited into 300 (explained later in hyperparameters sections), therefore the model can be better trained to achieve expected functions, within reasonable time.

## DNN Model
There are two versions of the architectures that were tested, a simple one constructed only with Keras, and another more complicated one using a pre-trained classifier as a fusion layer (mentioned earlier in Project Assignment 2), to help identify the objects inside the images, and learn to colorize them. However, the final decision was to use the simple DNN.

The reason of not using the complicated DNN is because, it takes longer time to train, but the result with same parameters are worse than the simple DNN. Also, when implementing them into the GUI, the complicated DNN requires downloading a pre-trained classifier model (InceptionResnet-v2) of size 225 MB. Furthermore, when processing the image, the model takes a lot of system memory when running (crushed on 4 GB ram, worked on 8 GB). The processing time is also much longer. The possible reason is that, with limited computing power and time, also a limited dataset with only two categories, the complicated DNN cannot outperform the simple DNN with its advantages. However, it is expected that, if the training dataset becomes more diverse and larger, the complicated DNN will begin outperforming the simple one.

## Architecture
This model used 1input layer as entry, and then 12 of 2D convolution layers, there are also 3 up-sampling layers for 2D inputs

## Instruction
Please use any Linux distribution or Unix-like OS (tested on Ubuntu 18.04.1 and macOS Mojave).

**1.1.****Install Dependencies**

Python 3

Tkinter

Keras

Tensorflow

Numpy

Scikit-image

**1.2.****Execution**

Please go to:

[https://github.com/hjt486/DeepColorizer](https://github.com/hjt486/DeepColorizer)

and clone the entire repository.

Once the repository is on your local disk, open the terminal and go to the repository, go to the “GUI” folder and execute the ‘colorizer_python3.py’:

    cd GUI

    python3 colorizer_python3.py

the GUI will pop up:

Click “Open”, and then click “test_images” folder under the “GUI” folder, then please select an image file from it, click “OPEN” to finish selection.

(You can try any photo you like, but it is recommended to use a square ratio (1:1) image with resolution of 256x256, but the program is able to process with image of any size, but changing the ratio may influence the colorizing performance. Also, you can select image that is not grey-scale, as mentioned above, the program will convert the image to grey-scale no matter it is with color or not, so using a colored image will be easy to make comparison)

The input image will be displayed on the left side, click “Colorize” to perform the colorizing procedure, and the colorized image will be displayed on the right.

## Repository folders explanation:

“datasets”

contains folder name “Train”, which is a datasets used for training (300 images of both portraits and landscape), also contains a folder called “full-dataset” with 9294 images, you can further utilize this dataset to train the model.

“DNN”

contains a .ipynb file that used to train the model, if you would like to train you own model, you can use this on Google Colab or any platform that support Jupyter Notebook.

“GUI”

as explained earlier, this contains a h5 model and a simple GUI application that can be run to test the DNN.

“models”

contains two models:

“mixed_100_1_5000_better_portraits.h5”

“mixed_300_3_3250_better_landscape.h5”

e.g: mixed_300_3_3250_better_portraits means it used mixed dataset (both portraits and landscape) of 300 images to train, steps are 3 and total 3250 epochs with tested result that shows it has better performance on landscape, you can use the model here to replace the one in GUI, to see the difference.

## Demo Link on YouTube

[https://youtu.be/9azzM7n1aCc](https://youtu.be/9azzM7n1aCc)
